{"file":"ContentNavigation-DPlnOohn.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,MAAM,yBAAyB,OAAO,iBAAiB;AAC5D,QAAM,EAAE,QAAO,IAAK,iBAAgB,EAAG;AACvC,MAAI,OAAO,cAAc,WAAW,YAAY;AAC9C,mBAAe,aAAa,YAAY;AAAA,EAC1C;AACA,QAAM,SAAS,aAAa,OAAM;AAClC,QAAM,UAAU,QAAQ,aAAa,uBAAuB,gBAAgB,eAAuC,GAAG,KAAK,MAAM,CAAC,IAAI,QAAQ,SAAS,EAAE,IAAI,kBAAkB,MAAM,CAAC,OAAO,IAAI,gBAAkE,eAAe,KAAK,MAAM,CAAC,IAAI,QAAQ,SAAS,OAAO;AAC9Q;AAC1C,qBAAiB,OAAO;AAAA,EAC1B;AACA,MAAI,kBAAiB,GAAI;AACvB,UAAM,qBAAqB,MAAM,OAAO,yBAAgB,EAAE,KAAK,CAAC,MAAM,EAAE,kBAAkB;AAC1F,WAAO,mBAAmB,MAAM;AAAA,EAClC;AACA,QAAM,OAAO,MAAM,OAAO,SAAS;AAAA,IACjC,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,QAAQ,QAAQ,aAAa,uBAAuB,SAAS;AAAA,MAC3D,SAAS,cAAc,MAAM;AAAA,MAC7B,cAAc,kBAAiB,EAAG,gBAAe;AAAA,IACvD;AAAA,EACA,CAAG;AACD,MAAI,OAAO,SAAS,YAAY,KAAK,WAAW,iBAAiB,GAAG;AAClE,UAAM,IAAI,MAAM,WAAW;AAAA,EAC7B;AACA,SAAO;AACT;AC5BA,MAAM,oBAAoB,gBAAgB;AAAA,EACxC,MAAM;AAAA,EACN,OAAO;AAAA;AAAA;AAAA;AAAA,IAIL,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA;EAEF,MAAM,MAAM,OAAO;AACjB,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,OAAO,KAAK;AAChB,UAAM,eAAe,SAAS,MAAM;AAClC,UAAI,OAAO,MAAM,OAAO,WAAW,YAAY;AAC7C,eAAO,MAAM,MAAM,OAAM;AAAA,MAC3B;AACA,aAAO,MAAM;AAAA,IACf,CAAC;AACD,QAAI,CAAC,aAAa,SAAS,SAAS,eAAe,EAAE,OAAO;AAC1D,YAAM,EAAE,YAAY,YAAU,IAAMA,mBAAU;AAC9C,aAAO,EAAE,YAAY,YAAU;AAAA,IACjC;AACA,UAAM,EAAE,MAAM,WAAS,IAAM,MAAM;AAAA,MACjC,sBAAsB,KAAK,aAAa,KAAK,CAAC;AAAA,MAC9C,MAAM,uBAAuB,aAAa,KAAK;AAAA;AAEjD,WAAO,EAAE;EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,KAAK;AACV,UAAM,QAAQ,SAAQ;AACtB,UAAM,EAAE,WAAS,IAAM;AACvB,UAAM,aAAa,CAAC,SAAS,EAAEC,oBAAU,EAAE,IAAI,KAAK,MAAI,GAAK,MAAM,KAAK,KAAK;AAC7E,UAAM,cAAc,CAAC,MAAM,UAAU;AAAA,MACnC;AAAA,MACA,QAAQ,EAAE,cAAc,MAAI,IAAM;AAAA,MAClC,KAAK,IAAI,CAAC,SAAS;AACjB,YAAI,KAAK,UAAU;AACjB,iBAAO,EAAE,MAAM,MAAM,CAAC,WAAW,IAAI,GAAG,YAAY,KAAK,UAAU,QAAQ,CAAC,CAAC,CAAC;AAAA,QAChF;AACA,eAAO,EAAE,MAAM,MAAM,WAAW,IAAI,CAAC;AAAA,MACvC,CAAC;AAAA;AAEH,UAAM,cAAc,CAAC,SAAS,YAAY,MAAM,CAAC;AACjD,WAAO,OAAO,UAAU,MAAM,QAAQ,EAAE,YAAY,GAAG,KAAK,OAAK,CAAG,IAAI,YAAY,UAAU;AAAA,EAChG;AACF,CAAC;AACD,MAAK,YAAa;;;;;;;;","names":["useContent","NuxtLink"],"sources":["../../../../../frontend/node_modules/@nuxt/content/dist/runtime/legacy/composables/navigation.js","../../../../../frontend/node_modules/@nuxt/content/dist/runtime/components/ContentNavigation.vue"],"sourcesContent":["import { hash } from \"ohash\";\nimport { encodeQueryParams } from \"../../utils/query.js\";\nimport { jsonStringify } from \"../../utils/json.js\";\nimport { addPrerenderPath, shouldUseClientDB, withContentBase } from \"../../composables/utils.js\";\nimport { useContentPreview } from \"../../composables/preview.js\";\nimport { queryContent } from \"./query.js\";\nimport { useRuntimeConfig } from \"#imports\";\nexport const fetchContentNavigation = async (queryBuilder) => {\n  const { content } = useRuntimeConfig().public;\n  if (typeof queryBuilder?.params !== \"function\") {\n    queryBuilder = queryContent(queryBuilder);\n  }\n  const params = queryBuilder.params();\n  const apiPath = content.experimental.stripQueryParameters ? withContentBase(`/navigation/${import.meta.dev ? \"_\" : `${hash(params)}.${content.integrity}`}/${encodeQueryParams(params)}.json`) : withContentBase(import.meta.dev ? `/navigation/${hash(params)}` : `/navigation/${hash(params)}.${content.integrity}.json`);\n  if (!import.meta.dev && import.meta.server) {\n    addPrerenderPath(apiPath);\n  }\n  if (shouldUseClientDB()) {\n    const generateNavigation = await import(\"./client-db.js\").then((m) => m.generateNavigation);\n    return generateNavigation(params);\n  }\n  const data = await $fetch(apiPath, {\n    method: \"GET\",\n    responseType: \"json\",\n    params: content.experimental.stripQueryParameters ? void 0 : {\n      _params: jsonStringify(params),\n      previewToken: useContentPreview().getPreviewToken()\n    }\n  });\n  if (typeof data === \"string\" && data.startsWith(\"<!DOCTYPE html>\")) {\n    throw new Error(\"Not found\");\n  }\n  return data;\n};\n","<script>\nimport { toRefs, defineComponent, h, useSlots, computed } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useAsyncData, fetchContentNavigation, useState, useContent } from \"#imports\";\nimport { NuxtLink } from \"#components\";\nconst ContentNavigation = defineComponent({\n  name: \"ContentNavigation\",\n  props: {\n    /**\n     * A query to be passed to `fetchContentNavigation()`.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      query\n    } = toRefs(props);\n    const queryBuilder = computed(() => {\n      if (typeof query.value?.params === \"function\") {\n        return query.value.params();\n      }\n      return query.value;\n    });\n    if (!queryBuilder.value && useState(\"dd-navigation\").value) {\n      const { navigation: navigation2 } = useContent();\n      return { navigation: navigation2 };\n    }\n    const { data: navigation } = await useAsyncData(\n      `content-navigation-${hash(queryBuilder.value)}`,\n      () => fetchContentNavigation(queryBuilder.value)\n    );\n    return { navigation };\n  },\n  /**\n   * Navigation empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { navigation } = ctx;\n    const renderLink = (link) => h(NuxtLink, { to: link._path }, () => link.title);\n    const renderLinks = (data, level) => h(\n      \"ul\",\n      level ? { \"data-level\": level } : null,\n      data.map((link) => {\n        if (link.children) {\n          return h(\"li\", null, [renderLink(link), renderLinks(link.children, level + 1)]);\n        }\n        return h(\"li\", null, renderLink(link));\n      })\n    );\n    const defaultNode = (data) => renderLinks(data, 0);\n    return slots?.default ? slots.default({ navigation, ...this.$attrs }) : defaultNode(navigation);\n  }\n});\nexport default ContentNavigation;\n</script>\n"],"version":3}